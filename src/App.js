// App.js
import React, { Component } from 'react';
import firebase from './firebase';
import './styles/App.scss';

// Step 1: Setup: HTML | SCSS | Firebase
// Step 2: Rig up input connections
// Step 3: Research creating objects through user input

class App extends Component {
  // Set up Constructor and call Super to establish current state of input properties, as well as an empty recipes array.
  constructor(props) {
    super(props);
    this.state = {
      name: '',
      author: '',
      type: '',
      instructions: '',
      recipes: []
    }
    // Create new functions binding 'this' to the object in which the method is called, rather than the global window (necessary because ES6 arrow functions have global rather than local scope).
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  // Connect the application to Firebase to draw info from it furing the componentDidMount stage of the app.
  componentDidMount() {
    const dbRef = firebase.database().ref('recipes');
    dbRef.on('value', (response) => {
      // The array that the parent recipes object values will be put into
      const newState = [];
      
      // Response.val() gives back the parent recipes object containing each recipe child object.
      let recipes = response.val();
      
      // Let the key parameter into the recipes object. This action gives access to the unique key that Firebase generates for each object that's pushed into it (upon execution of the handleSubmit button)
      for (let key in recipes) {
        newState.push({
          id: key,
          name: recipes[key].name,
          author: recipes[key].author,
          type: recipes[key].type,
          instructions: recipes[key].instructions
        });
      }

      // Fill the empty recipes array (declared on initial state) with the value of the newState array
      this.setState({
        recipes: newState
      });
    });
  }

  // A function executing on change of input value, setting the state of targetted input to the new value. Variables are used to target multiple input fields and their values.
  handleChange = (e) => {
    this.setState({
      [e.target.name]: e.target.value
    });
  }

  // A function executing on form submission.
  handleSubmit = (e) => {
    // Prevent form refresh.
    e.preventDefault();

    // If the name value is not empty, access the 'recipes' reference inside of the database, and push a new recipe object and its properties into it.
    if (this.state.name !== "") {
      // Declare a variable for the function calling the database.
      const dbRef = firebase.database().ref("recipes");
      // Declare a variable to represent the object being pushed. In the database, 'recipe' will show as a unique key generated by Firebase.
      const recipe = {
        name: this.state.name,
        author: this.state.author,
        type: this.state.type,
        instructions: this.state.instructions
      };

      // Push the recipe object into the database.
      dbRef.push(recipe);

      // After the object has been pushed into the dabase, reset the input values to clear.
      this.setState({
        name: "",
        author: "",
        type: "",
        instructions: ""
      });
    }
  }
  
  removeRecipe(id) {
    const recipeRef = firebase.database().ref(`/recipes/${id}`)
    recipeRef.remove();
  }

  render() {
    return (
      <div className="App">
        <h1>My Recipe Book</h1>
        <form onClick={this.handleSubmit} className="recipeEntry">
          <input
            type="text"
            name="name"
            placeholder=""
            onChange={this.handleChange}
            value={this.state.name}
          ></input>
          <input
            type="text"
            name="author"
            placeholder=""
            onChange={this.handleChange}
            value={this.state.author}
          ></input>
          <select
            name="type"
            onChange={this.handleChange}
            value={this.state.type}
          >
            <option value="">Pick One</option>
            <option value="salad">Salad</option>
            <option value="soup">Soup</option>
            <option value="desert">Desert</option>
          </select>
          <textarea
            name="instructions"
            placeholder=""
            onChange={this.handleChange}
            value={this.state.instructions}
          ></textarea>
          <button type="submit">Add Recipe</button>
        </form>

        <section>
          <div>
            <ul>
              {this.state.recipes.map(recipe => {
                return (
                  <li key={recipe.id}>
                    <h3>{recipe.name}</h3>
                    <p>{recipe.author}</p>
                    <p>{recipe.type}</p>
                    <p>{recipe.instructions}</p>
                    <button onClick={() => this.removeRecipe(recipe.id)}>Remove Recipe</button>
                    <hr />
                  </li>
                );
              })}
            </ul>
          </div>
        </section>
      </div>
    );
  }
}

export default App;
