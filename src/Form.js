    import React, { Component } from 'react';
    import firebase from "./firebase"; 

    import { faFeatherAlt } from "@fortawesome/free-solid-svg-icons";
    import { faUserEdit } from "@fortawesome/free-solid-svg-icons";
    import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

    class Form extends Component {
    constructor() {
        super();
        this.state = {
        name: "",
        author: "",
        type: "",
        instructions: "",
        time: "",
        likes: ""
        };
        this.handleChange = this.handleChange.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);
    }

    // A function executing on change of input value, setting the state of targetted input to the new value. Variables are used to target multiple input fields and their values.
    handleChange = e => {
        this.setState({
        [e.target.name]: e.target.value
        });
    };

    // A function executing on form submission.
    handleSubmit = e => {
        // Prevent form refresh.
        e.preventDefault();
        // alert('Are you sure you want to add this recipe to your cookbook?' )
        // If the name value is not empty, access the 'recipes' reference inside of the database, and push a new recipe object and its properties into it.
        if (this.allFieldsChecked()) {
        // Declare a variable for the function calling the database.
        const dbRef = firebase.database().ref("recipes");
        // Declare a variable to represent the object being pushed. In the database, 'recipe' will show as a unique key generated by Firebase.
        const recipe = {
            name: this.state.name,
            author: this.state.author,
            type: this.state.type,
            instructions: this.state.instructions,
            time: this.state.time,
            likes: 0
        };

        // Push the recipe object into the database.
        dbRef.push(recipe);

        // After the object has been pushed into the dabase, reset the input values to clear.
        this.setState({
            name: "",
            author: "",
            type: "",
            instructions: "",
            time: ""
        });
        }
    };

    // Form validation code, greying out the submit button until all fields are filled in.
    allFieldsChecked() {
        const { name, author, instructions } = this.state;
        return name.length > 0 && author.length > 0 && instructions.length > 0;
    }

    render() {
        const isEnabled = this.allFieldsChecked();
        return (
            <section className="wrapper" id="newRecipe">
                <form onClick={this.handleSubmit} className="recipeEntry">
                <div className="question">
                    <label id="recipeName">
                    <FontAwesomeIcon icon={faFeatherAlt} className="smallIcon" />
                    Recipe name:
                    </label>
                    <input
                    type="text"
                    name="name"
                    id="recipeName"
                    placeholder="Eggs on Toast"
                    onChange={this.handleChange}
                    value={this.state.name}
                    required
                    ></input>
                </div>
                <div className="question">
                    <label id="authorName">
                    <FontAwesomeIcon icon={faUserEdit} className="smallIcon" />
                    Your name:
                    </label>
                    <input
                    type="text"
                    name="author"
                    id="authorName"
                    placeholder="Torton Gramsey"
                    onChange={this.handleChange}
                    value={this.state.author}
                    required
                    ></input>
                </div>
                <div className="question">
                    <label id="time">
                    <FontAwesomeIcon icon={faUserEdit} className="smallIcon" />
                    Prep time:
                    </label>
                    <input
                    type="text"
                    name="time"
                    id="time"
                    placeholder="45min"
                    onChange={this.handleChange}
                    value={this.state.time}
                    required
                    ></input>
                </div>
                <div className="question">
                    <label id="recipeType">What type of recipe is it?</label>
                    <select
                    name="type"
                    id="recipeType"
                    onChange={this.handleChange}
                    value={this.state.type}
                    required
                    >
                    <option value="">Pick One</option>
                    <option value="salad">Salad</option>
                    <option value="soup">Soup</option>
                    <option value="dessert">Dessert</option>
                    </select>
                </div>
                <div className="question">
                    <label id="instructions">How do you make it?</label>
                    <textarea
                    name="instructions"
                    id="instructions"
                    placeholder="Step 1: Put toast on a frying pan."
                    onChange={this.handleChange}
                    value={this.state.instructions}
                    required
                    ></textarea>
                </div>
                <button type="submit" disabled={!isEnabled}>
                    Add Recipe
                </button>
                <a href="/#recipeList" class="button">
                    Check It Out!
                </a>
                </form>
                </section>
        );
    }
    }

    export default Form;