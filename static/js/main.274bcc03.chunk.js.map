{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","props","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","state","dbRef","database","ref","recipe","author","type","instructions","push","recipes","bind","on","response","newState","val","key","id","remove","className","onClick","this","placeholder","onChange","map","removeRecipe","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.274bcc03.chunk.js","sourcesContent":["// Firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBS7-l3QGrrjNOjeBveNuOw43EPLCs64h0\",\n    authDomain: \"projectfive-58123.firebaseapp.com\",\n    databaseURL: \"https://projectfive-58123.firebaseio.com\",\n    projectId: \"projectfive-58123\",\n    storageBucket: \"projectfive-58123.appspot.com\",\n    messagingSenderId: \"685748994816\",\n    appId: \"1:685748994816:web:a5fe6a534909f0bb2069e5\",\n    measurementId: \"G-BHWNHQ6PJN\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// Export configured version of firebase\nexport default firebase;","// App.js\nimport React, { Component } from 'react';\nimport firebase from './firebase';\nimport './styles/App.scss';\n\n// Step 1: Setup: HTML | SCSS | Firebase\n// Step 2: Rig up input connections\n// Step 3: Research creating objects through user input\n\nclass App extends Component {\n  // Set up Constructor and call Super to establish current state of input properties, as well as an empty recipes array.\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      author: '',\n      type: '',\n      instructions: '',\n      recipes: []\n    }\n    // Create new functions binding 'this' to the object in which the method is called, rather than the global window (necessary because ES6 arrow functions have global rather than local scope).\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // Connect the application to Firebase to draw info from it furing the componentDidMount stage of the app.\n  componentDidMount() {\n    const dbRef = firebase.database().ref('recipes');\n    dbRef.on('value', (response) => {\n      // The array that the parent recipes object values will be put into\n      const newState = [];\n      \n      // Response.val() gives back the parent recipes object containing each recipe child object.\n      let recipes = response.val();\n      \n      // Let the key parameter into the recipes object. This action gives access to the unique key that Firebase generates for each object that's pushed into it (upon execution of the handleSubmit button)\n      for (let key in recipes) {\n        newState.push({\n          id: key,\n          name: recipes[key].name,\n          author: recipes[key].author,\n          type: recipes[key].type,\n          instructions: recipes[key].instructions\n        });\n      }\n\n      // Fill the empty recipes array (declared on initial state) with the value of the newState array\n      this.setState({\n        recipes: newState\n      });\n    });\n  }\n\n  // A function executing on change of input value, setting the state of targetted input to the new value. Variables are used to target multiple input fields and their values.\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  // A function executing on form submission.\n  handleSubmit = (e) => {\n    // Prevent form refresh.\n    e.preventDefault();\n\n    // If the name value is not empty, access the 'recipes' reference inside of the database, and push a new recipe object and its properties into it.\n    if (this.state.name !== \"\") {\n      // Declare a variable for the function calling the database.\n      const dbRef = firebase.database().ref(\"recipes\");\n      // Declare a variable to represent the object being pushed. In the database, 'recipe' will show as a unique key generated by Firebase.\n      const recipe = {\n        name: this.state.name,\n        author: this.state.author,\n        type: this.state.type,\n        instructions: this.state.instructions\n      };\n\n      // Push the recipe object into the database.\n      dbRef.push(recipe);\n\n      // After the object has been pushed into the dabase, reset the input values to clear.\n      this.setState({\n        name: \"\",\n        author: \"\",\n        type: \"\",\n        instructions: \"\"\n      });\n    }\n  }\n  \n  removeRecipe(id) {\n    const recipeRef = firebase.database().ref(`/recipes/${id}`)\n    recipeRef.remove();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>My Recipe Book</h1>\n        <form onClick={this.handleSubmit} className=\"recipeEntry\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"\"\n            onChange={this.handleChange}\n            value={this.state.name}\n          ></input>\n          <input\n            type=\"text\"\n            name=\"author\"\n            placeholder=\"\"\n            onChange={this.handleChange}\n            value={this.state.author}\n          ></input>\n          <select\n            name=\"type\"\n            onChange={this.handleChange}\n            value={this.state.type}\n          >\n            <option value=\"\">Pick One</option>\n            <option value=\"salad\">Salad</option>\n            <option value=\"soup\">Soup</option>\n            <option value=\"desert\">Desert</option>\n          </select>\n          <textarea\n            name=\"instructions\"\n            placeholder=\"\"\n            onChange={this.handleChange}\n            value={this.state.instructions}\n          ></textarea>\n          <button type=\"submit\">Add Recipe</button>\n        </form>\n\n        <section>\n          <div>\n            <ul>\n              {this.state.recipes.map(recipe => {\n                return (\n                  <li key={recipe.id}>\n                    <h3>{recipe.name}</h3>\n                    <p>{recipe.author}</p>\n                    <p>{recipe.type}</p>\n                    <p>{recipe.instructions}</p>\n                    <button onClick={() => this.removeRecipe(recipe.id)}>Remove Recipe</button>\n                    <hr />\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}